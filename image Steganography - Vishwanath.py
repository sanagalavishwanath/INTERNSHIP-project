import tkinter as tk
from tkinter import messagebox
from tkinter import filedialog
import base64
from PIL import Image, ImageTk
from tkinter import Tk, PhotoImage
import io
import tempfile
import sys
import os
import subprocess
import pkg_resources
import webbrowser
import threading
from cryptography.fernet import Fernet, InvalidToken
from PIL import Image
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.image import MIMEImage
from email.mime.text import MIMEText
from email.mime.application import MIMEApplication
import re


icon_path = 'logo.png'

# Replace 'base64_icon' with your actual base64-encoded image
base64_icon = ''

# Convert the base64 string to bytes
icon_data = base64.b64decode(base64_icon)

# Create the main window and buttons
root = tk.Tk()
# Create a PhotoImage object from the bytes
icon_image = PhotoImage(data=icon_data)
root.iconphoto(True, icon_image)
root.title("Image Steganography")
root.geometry("600x500")
window_width = 600
window_height = 500
screen_width = root.winfo_screenwidth()
screen_height = root.winfo_screenheight()
x = int((screen_width / 2) - (window_width / 2))
y = int((screen_height / 2) - (window_height / 2))
root.geometry(f"{window_width}x{window_height}+{x}+{y}")
root.configure(bg='#a881af')
button_frame = tk.Frame(root, bg="#a881af")
button_image = None

def project_info():
    html_code = """
   <!DOCTYPE html>
<html>
<head>
    <title>Project Information</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f2f2f2;
        }

        .container {
            max-width: 800px;
            margin: 0 auto;
            padding: 50px 20px;
            background-color: #fff;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
            border-radius: 4px;
            position: relative;
        }
        .photo {
            position: absolute;
            top: 20px;
            right: 20px;
            width: 100px;
            height: 100px;
            background-image: url('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TdldaZBTfhWJUgDPBh4DjnykhAREQERECH6Q9Hbe8VVrBu5naytgjPP08BK6vVpa8A1a4KrnCllwMnj+rwl5iYvHjbux6eL1vPxY9OGdkael6fSoUVo0gQiZwCSTxJJOT6mbRQZBwMjODjlPUCbk12efLK5W23drFcW6VF2OqupxlWUMDxzyMW9tTprtpoqLz2ooUZ88CZohGs9jRL9qaVMuMd8opbhy73OZmUEgkA4ORkcjgjI8jgn4z3EDwFGScDJxk44nHL8YCDjwHe58OfADj58AJ7iB4poFAUAAAAAAYAHkB4TDSsaCuai0qauc5dUUMcnJyQMnjNmIGG5tadRdtREdc52uoYZ88Hxn23oIi7EVVUclRQAPcJliBrJY0RU7UUqYc5zUCKHOf2sZmZ1BBBAIPAg8QRPcQNa2saFMk06VNM8DsRVyPcJmCDO7AyQATjiQMkDPlxPxnuIGpX063dt70qTNw7zU1LcOXEiZbi2p1BtqIrjOdrqGGfPBmaIGKhQRFCIqqo5KoAA9w5TLEQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERA//9k=');
            background-size: cover;
            border-radius: 50%;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
        }

        h1 {
            font-size: 36px;
            margin-bottom: 30px;
        }

        p {
            font-size: 18px;
            line-height: 1.5;
            margin-bottom: 20px;
        }

        table {
            width: 100%;
            margin-bottom: 20px;
            border-collapse: collapse;
        }

        table td,
        table th {
            padding: 10px;
            text-align: left;
            border: 1px solid #ddd;
        }

        table th {
            background-color: #f2f2f2;
            font-size: 18px;
        }

        @media only screen and (max-width: 600px) {
            .container {
                padding: 30px 10px;
            }
            h1 {
                font-size: 24px;
            }
            p {
                font-size: 16px;
            }
            .photo {
                width: 100px;
                height: 100px;
                top: 10px;
                right: 10px;
            }
            table td,
            table th {
                padding: 5px;
                font-size: 16px;
            }
            table th {
                font-size: 16px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
    <div class="photo"></div>
        <h1>Project Information</h1>
        <p>This project was developed by <strong>Team Hackers</strong> as part of a <strong>Cyber Security Intership</strong>. This project is designed to <strong>Secure the Organizations in Real World from Cyber Frauds performed by Hackers</strong>.</p>
        <table>
            <thead>
                <tr>
                    <th>Project Details</th>
                    <th>Value</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>Project Name</td>
                    <td>Image Steganography using LSB</td>
                </tr>
                <tr>
                    <td>Project Description</td>
                    <td>Hiding Message with Encryption in Image using LSB Algorithm with image preview</td>
                </tr>
                <tr>
                    <td>Project Start Date</td>
                    <td>01-NOV-2023</td>
                </tr>
                <tr>
                    <td>Project End Date</td>
                    <td>31-NOV-2023</td>
                </tr>
                <tr>
                    <td>Project Status</td>
                    <td><strong>Completed</strong></td>
                </tr>
            </tbody>
        </table>
        <h2>Developer Details</h2>
        <table>
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Email</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>Vankadaru Charan</td>
                    <td>charanrockz2703@gmail.com</td>
                </tr>
                <tr>
                    <td>Sanagala Vishwanath</td>
                    <td>sanagalavishwanath17@gmail.com</td>    
                </tr>
                <tr>
                 <td>Kumavat Prakash</td>
                    <td>kumavatprakash20@gmail.com</td>
                </tr>
                <tr>
                    <td>G Vaishnavi</td>
                    <td>gaddevaishnavi05@gmail.com</td>
                </tr>
                <tr>
                    <td>B Bhagya</td>
                    <td>busireddybhagyashree@gmail.com</td>
                </tr>
                <tr>
                    <td>Sai Ram Gatla</td>
                    <td>sairamravindergatla7@gmail.com</td>
                </tr>
        </table>
        
        <h2>Company Details</h2>
        <table>
            <thead>
                <tr>
                    <th>Company</th>
                    <th>Contact Mail</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>Supraja Technology</td>
                    <td>contact@suprajatechnologies.com</td>
                </tr>
        </table>

    """
    # Save the HTML content to a temporary file
    with tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='.html') as temp_file:
        temp_file.write(html_code)
        temp_file_path = temp_file.name

    # Open the temporary HTML file in the default web browser
    webbrowser.open('file://' + os.path.realpath(temp_file_path))


# Define the function to be executed when the first button is clicked
def button1_clicked():
    global file_window
    global button_image
    file_window = tk.Toplevel(root)
    file_window.geometry("560x250")
    file_window.title("Select Image")

    # create a Label widget for the file path
    filepath_label = tk.Label(file_window, text="File Path")
    message_label = tk.Label(file_window, text="Message")
    email_label = tk.Label(file_window,text="Sender Email")
    smtp_label = tk.Label(file_window,text="SMTP Password")
    receiver_label = tk.Label(file_window,text="Receiver Email")
    # create an Entry widget for the file path
    filepath_entry = tk.Entry(file_window, width=60)
    message_entry = tk.Entry(file_window,width=60)
    email_entry = tk.Entry(file_window, width=60)
    smtp_entry = tk.Entry(file_window, width=60,show="*")
    receiver_entry = tk.Entry(file_window, width=60)
    
    # create a function to handle button clicks
    def browse_file():
        # display the file dialog and get the selected file
        file_path = filedialog.askopenfilename(
            filetypes=[("PNG files", "*.png"), ("JPEG files", "*.jpg;*.jpeg")]
        )
        preview_file(file_path)
        # update the Entry widget with the selected file path
        filepath_entry.delete(0, tk.END)
        filepath_entry.insert(0, file_path)

    def preview_file(file_path):
    	try:
    		image = Image.open(file_path)
    		image.thumbnail((300, 300))
    		img_preview = ImageTk.PhotoImage(image)

    		#create a preview window
    		preview_window = tk.Toplevel(root)
    		preview_window.title("................File Preview.................")
    		preview_window.geometry("400x400")

    		preview_canvas = tk.Canvas(preview_window)
    		preview_canvas.pack(pady=10)
    		#update the canvas with new image
    		preview_canvas.config(width=img_preview.width(), height=img_preview.height())
    		preview_canvas.create_image(0, 0, anchor=tk.NW, image=img_preview)
    		preview_canvas.image = img_preview
    		preview_label = tk.Label(preview_window, text=f"Selected File: {file_path}")
    		preview_label.pack(pady=10)
    		preview_window.after(2000,lambda:preview_window.destroy())
    	except Exception as e:
    		file_label.config(text=f"Error: {e}")
    		preview_canvas.config(width=0, height=0)
    
    # create a Button widget for browsing files
    browse_button = tk.Button(file_window,text="Browse Files",font=("Arial", 8, "bold"),bg="#5783db", fg="black",command=browse_file)

    def hide_text_in_image():
         # Display the loading window
        loading_window = tk.Toplevel(root)
        loading_window.title("Loading")
        loading_window.geometry("200x100")
        loading_label = tk.Label(loading_window, text="Encrypting...", font=("Arial", 14))
        loading_label.pack(pady=20)
        def encrypt_image():
            image_path = filepath_entry.get()
            sender_email = email_entry.get()
            receiver_email = receiver_entry.get()
            smtp_password = smtp_entry.get()
            if image_path == '':
                messagebox.showerror("Error", "Please select a file to encrypt.")
                loading_window.destroy()
                return
            if not os.path.exists(image_path):
                messagebox.showerror("Error", "Invalid file path.")
                loading_window.destroy()
                return
            try:
                img = Image.open(image_path)
                if img.format != "PNG" and img.format != "JPEG" and img.format != "JPEG":
                    messagebox.showerror("Error", "Please select a PNG image to encrypt.")
                    loading_window.destroy()
                    return
            except IOError:
                messagebox.showerror("Error", "The file may be already encrypted \n           (or)\n The file is not an image fiel")
                loading_window.destroy()
                return

            else:
                output_path = "encoded_image.png"
                key = Fernet.generate_key()
                message = message_entry.get()
                f = Fernet(key)
                secret_message = f.encrypt(message.encode())
        
                # Open the image
                image = Image.open(image_path)
                # Convert the image to RGB mode if it's not already
                image = image.convert("RGB")
                # Get the pixel data of the image
                pixels = list(image.getdata())
                width, height = image.size

                # Convert the secret message to binary
                binary_secret = ''
                if secret_message:
                    secret_message_str = str(secret_message)+'\n'  # Ensure secret_message is a string
                    binary_secret = ''.join(format(ord(char), '08b') for char in secret_message_str)



                # Pad the binary secret message to make its length a multiple of 3
                remainder = len(binary_secret) % 3
                if remainder != 0:
                    binary_secret += '0' * (3 - remainder)

                # Check if the image can hold the secret message
                max_chars = (width * height) * 3 // 8
                if len(binary_secret) > max_chars:
                    raise ValueError("Secret message is too long to fit in the image.")

                # Embed the secret message into the pixel data
                index = 0
                for i, pixel in enumerate(pixels):
                    if index < len(binary_secret):
                        # Convert the pixel value to binary
                        r, g, b = map(lambda x: format(x, '08b'), pixel)

                        # Modify the least significant bit (LSB) of each color component
                        r = r[:-1] + binary_secret[index]
                        g = g[:-1] + binary_secret[index + 1]
                        b = b[:-1] + binary_secret[index + 2]

                        # Update the pixel with the modified color components
                        pixels[i] = (int(r, 2), int(g, 2), int(b, 2))
                        index += 3
                    else:
                        break
                
                # Create a new image with the modified pixel data
                encoded_image = Image.new("RGB", (width, height))
                encoded_image.putdata(pixels)

                # Save the encoded image
                encoded_image.save(output_path)

                #Email details
                sender_email = sender_email
                receiver_email = receiver_email
                subject = 'The Key and Encrypted Image'
                message = 'The Key for Encrypted Image is:\n'+str(key)

                #Image details
                image_path = output_path

                #Create a multipart message
                msg = MIMEMultipart()
                msg['From'] = sender_email
                msg['To'] = receiver_email
                msg['Subject'] = subject
                
                # Open the file in bynary
                with open(image_path, "rb") as attachment:
                    # Add file as application/octet-stream
                    # Email client can usually download this automatically as attachment
                    part = MIMEApplication(attachment.read(), Name=image_path)

                # Add header
                part["Content-Disposition"] = f"attachment; filename= {image_path}"                                                         

                # Attach the file to the email
                msg.attach(part)

                #Add a text message to the email
                msg.attach(MIMEText(message, 'plain'))

                #SMTP server details
                smtp_server = 'smtp.gmail.com'
                smtp_port = 587
                smtp_username = sender_email
                smtp_password = smtp_password

                #Connect to the SMTP server
                server = smtplib.SMTP(smtp_server, smtp_port)
                server.starttls()
                try:
                    server.login(smtp_username, smtp_password)
                except smtplib.SMTPAuthenticationError:
                    messagebox.showerror("Error","Wrong SMTP Password")
                    loading_window.destroy()
                    return

                #Send the email
                try:
                    server.send_message(msg)
                except smtplib.SMTPRecipientsRefused:
                    messagebox.showerror("Error", "Envalid Email Address")
                    loading_window.destroy()
                    return

                #Disconnect from the email
                server.quit()

                # Close the loading window
                loading_window.destroy()

                # Show success message
                messagebox.showinfo("Info", "Image encrypted successfully.")

        # Start the encryption process in a separate thread
        thread = threading.Thread(target=encrypt_image)
        thread.start()

    encrypt_button = tk.Button(file_window,text="Hide Text", font=("Arial", 14, "bold"),bg="#5783db", fg="black",command=hide_text_in_image)

    # arrange the widgets using grid
    filepath_label.grid(row=0, column=0, sticky=tk.E)
    filepath_entry.grid(row=0, column=1)
    browse_button.grid(row=0, column=2)
    message_label.grid(row=1, column=0)
    message_entry.grid(row=1,column=1)
    email_label.grid(row=2,column=0)
    email_entry.grid(row=2,column=1)
    smtp_label.grid(row=3,column=0)
    smtp_entry.grid(row=3,column=1)
    receiver_label.grid(row=4,column=0)
    receiver_entry.grid(row=4,column=1)
    encrypt_button.grid(row=5, column=1)

    # center the widgets
    file_window.grid_rowconfigure(0, weight=0)
    file_window.grid_columnconfigure(1, weight=0)
    filepath_label.grid(padx=10,sticky="w")
    filepath_entry.grid(pady=10,sticky="w")
    browse_button.grid(padx=10,pady=2, sticky="w")
    message_label.grid(padx=10,sticky="w")
    message_entry.grid(pady=10,sticky="w")
    email_label.grid(padx=10,sticky="w")
    email_entry.grid(pady=10,sticky="w")
    smtp_label.grid(padx=10,sticky="w")
    smtp_entry.grid(pady=10,sticky="w")
    receiver_label.grid(padx=10,sticky="w")
    receiver_entry.grid(pady=10,sticky="w")
    encrypt_button.grid(padx=100,sticky="w")

    # prevent the file window from being destroyed
    file_window.grab_set()


# Define the function to be executed when the second button is clicked
def button2_clicked():
    global file_window
    file_window = tk.Toplevel(root)
    file_window.geometry("550x200")
    file_window.title("Select Image")

    # create a Label widget for the file path
    filepath_label = tk.Label(file_window, text="File Path")
    password_label = tk.Label(file_window,text="Password")
    # create an Entry widget for the file path
    filepath_entry = tk.Entry(file_window, width=60)
    password_entry = tk.Entry(file_window, width=60)
    
    # create a function to handle button clicks
    def browse_file():
        # display the file dialog and get the selected file
        file_path = filedialog.askopenfilename(
            filetypes=[("PNG files", "*.png"), ("JPEG files", "*.jpg;*.jpeg")]
        )
        preview_file(file_path)
        # update the Entry widget with the selected file path
        filepath_entry.delete(0, tk.END)
        filepath_entry.insert(0, file_path)
        

    def preview_file(file_path):
    	try:
    		image = Image.open(file_path)
    		image.thumbnail((300, 300))
    		img_preview = ImageTk.PhotoImage(image)
    		preview_window = tk.Toplevel(root)
    		preview_window.title(".................File Preview.................")
    		preview_window.geometry("400x400")

    		preview_canvas = tk.Canvas(preview_window)
    		preview_canvas.pack(pady=10)
    		#update the canvas with new image
    		preview_canvas.config(width=img_preview.width(), height=img_preview.height())
    		preview_canvas.create_image(0, 0, anchor=tk.NW, image=img_preview)
    		preview_canvas.image = img_preview
    		preview_label = tk.Label(preview_window, text=f"Selected File: {file_path}")
    		preview_label.pack(pady=10)
    		preview_window.after(2000,lambda:preview_window.destroy())
    	except Exception as e:
    		file_label.config(text=f"Error: {e}")
    		preview_canvas.config(width=0, height=0)

    global button_image

    # create a Button widget for browsing files
    browse_button = tk.Button(file_window,text="Browse Files",font=("Arial", 8, "bold"),bg="#5783db", fg="black", command=browse_file)


    def extract_text_from_image():
        # Display the loading window
        loading_window = tk.Toplevel(root)
        loading_window.title("Loading")
        loading_window.geometry("200x100")
        loading_label = tk.Label(loading_window, text="Decrypting...", font=("Arial", 14))
        loading_label.pack(pady=20)
        def decrypt_image():
            file_path = filepath_entry.get()
            password = password_entry.get()
            if file_path == '':
                messagebox.showerror("Error", "Please select a file to decrypt.")
                loading_window.destroy()
                return
            if not os.path.exists(file_path):
                messagebox.showerror("Error", "Invalid file path.")
                loading_window.destroy()
                return
            img = Image.open(file_path)
            if img.format != "PNG":
                messagebox.showerror("Error", "Please select a PNG image to decrypt.")
                loading_window.destroy()
                return
            if password == '':
                messagebox.showerror("Error", "Please Enter a password")
                loading_window.destroy()
                return
            else:
                    key = bytes(password.encode())
                    key = key[2:-1]
                    #Open the encoded image
                    encoded_image = Image.open(file_path)

                    #Get the pixel data of the encoded image
                    pixels = list(encoded_image.getdata())

                    # Extract the hidden message from the LSB of each color component
                    binary_secret = ""
                    for pixel in pixels:
                        try:
                            r, g, b = pixel
                        except ValueError:
                            messagebox.showerror("Error", "Please select encrypted photo")
                            loading_window.destroy()
                            return
                        binary_secret += format(r, '08b')[-1]
                        binary_secret += format(g, '08b')[-1]
                        binary_secret += format(b, '08b')[-1]

                    # Convert the binary secret message to text
                    secret_message = ""
                    for i in range(0, len(binary_secret), 8):
                        byte = binary_secret[i:i+8]
                        char = chr(int(byte, 2))
                        secret_message += char
                    message = secret_message.split('\n')
                    message = bytes(message[0].encode())
                    message = message[2:-1]

                    try:
                        try:
                            f = Fernet(key)
                        except ValueError:
                            messagebox.showerror("Error", "Invalid Key. Decryption failed")
                            loading_window.destroy()
                            return
                        original_message = f.decrypt(message).decode()
                        print(original_message)
                        # Close the loading window
                        loading_window.destroy()

                        # Show success message
                        messagebox.showinfo("Info", "The Hidden Text is\n"+original_message)
                    except InvalidToken:
                        messagebox.showerror("Error", "Invalid Key. Decryption failed")
                        return
        # Start the encryption process in a separate thread
        thread = threading.Thread(target=decrypt_image)
        thread.start()        

    decrypt_button = tk.Button(file_window,text="Extract Text", font=("Arial", 14, "bold"),bg="#5783db", fg="black",command=extract_text_from_image)

    # arrange the widgets using grid
    filepath_label.grid(row=0, column=0, sticky=tk.E)
    filepath_entry.grid(row=0, column=1)
    browse_button.grid(row=0, column=2)
    password_label.grid(row=1,column=0)
    password_entry.grid(row=1,column=1)
    decrypt_button.grid(row=2, column=1)

    # center the widgets
    file_window.grid_rowconfigure(0, weight=0)
    file_window.grid_columnconfigure(1, weight=0)
    filepath_label.grid(padx=10,sticky="e")
    filepath_entry.grid(pady=10,sticky="w")
    browse_button.grid(padx=10,pady=2, sticky="w")
    password_label.grid(padx=10,sticky="e")
    password_entry.grid(pady=10,sticky="w")
    decrypt_button.grid(padx=100,sticky="w")

    # prevent the file window from being destroyed
    file_window.grab_set()


info_button = tk.Button(root, text="Project Info",font=("Arial", 14, "bold"),bg="#5783db",fg="black",command=project_info)
info_button.pack(pady=20)
project_label = tk.Label(root,text="Image Steganography!!!",font=("Arial", 18,"bold"),bg="black",fg="white")
project_label.pack(pady=25)

# Set base64 string image as the background
background_image_base64 = "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TdldaZBTfhWJUgDPBh4DjnykhAREQERECH6Q9Hbe8VVrBu5naytgjPP08BK6vVpa8A1a4KrnCllwMnj+rwl5iYvHjbux6eL1vPxY9OGdkael6fSoUVo0gQiZwCSTxJJOT6mbRQZBwMjODjlPUCbk12efLK5W23drFcW6VF2OqupxlWUMDxzyMW9tTprtpoqLz2ooUZ88CZohGs9jRL9qaVMuMd8opbhy73OZmUEgkA4ORkcjgjI8jgn4z3EDwFGScDJxk44nHL8YCDjwHe58OfADj58AJ7iB4poFAUAAAAAAYAHkB4TDSsaCuai0qauc5dUUMcnJyQMnjNmIGG5tadRdtREdc52uoYZ88Hxn23oIi7EVVUclRQAPcJliBrJY0RU7UUqYc5zUCKHOf2sZmZ1BBBAIPAg8QRPcQNa2saFMk06VNM8DsRVyPcJmCDO7AyQATjiQMkDPlxPxnuIGpX063dt70qTNw7zU1LcOXEiZbi2p1BtqIrjOdrqGGfPBmaIGKhQRFCIqqo5KoAA9w5TLEQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERA//9k="
background_image_data = base64.b64decode(background_image_base64)
background_image = Image.open(io.BytesIO(background_image_data))
background_image = background_image.resize((200, 150), Image.Resampling.LANCZOS)
background_photo = ImageTk.PhotoImage(background_image)
background_label = tk.Label(root, image=background_photo)
background_label.pack()

button1 = tk.Button(button_frame, text="Hide Text", font=("Arial", 14, "bold"), padx=10, pady=5, command=button1_clicked, bg="#5783db", fg="black")
button2 = tk.Button(button_frame, text="Extract Text",font=("Arial", 14, "bold"),padx=10, pady=5,command=button2_clicked,bg="#5783db",fg="black")
# Pack the buttons in the frame

button1.pack(side="top", fill="x", padx=50, pady=10)
button2.pack(side="bottom", fill="x", padx=50, pady=10)

# Pack the frame in the root window
button_frame.pack(expand=True)


# Start the main event loop
root.mainloop()
